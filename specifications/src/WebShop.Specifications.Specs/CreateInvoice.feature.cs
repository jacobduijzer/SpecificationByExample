// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebShop.Specifications.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreatingAnInvoiceFromAShoppingBasketFeature : object, Xunit.IClassFixture<CreatingAnInvoiceFromAShoppingBasketFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateInvoice.feature"
#line hidden
        
        public CreatingAnInvoiceFromAShoppingBasketFeature(CreatingAnInvoiceFromAShoppingBasketFeature.FixtureData fixtureData, WebShop_Specifications_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Creating an invoice from a shopping basket", "As a customer\nI want to review my order before paying\nSo I know what items I orde" +
                    "red and the amount I have to pay", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Author",
                        "Format",
                        "Price"});
            table1.AddRow(new string[] {
                        "Specification By Example",
                        "Gojko Adzic",
                        "PFD",
                        "22.67"});
            table1.AddRow(new string[] {
                        "Specification By Example",
                        "Gojko Adzic",
                        "Hard copy",
                        "31.49"});
            table1.AddRow(new string[] {
                        "Writing Great Specifications",
                        "Kamil Nicieja",
                        "epub",
                        "22.67"});
            table1.AddRow(new string[] {
                        "Writing Great Specifications",
                        "Kamil Nicieja",
                        "Hard copy",
                        "28.34"});
            table1.AddRow(new string[] {
                        "Code That Fits In Your Head",
                        "Mark Seemann",
                        "PDF",
                        "23.99"});
            table1.AddRow(new string[] {
                        "Code That Fits In Your Head",
                        "Mark Seemann",
                        "Hard copy",
                        "35.99"});
#line 8
        testRunner.Given("the following books", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ordering digital books only")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating an invoice from a shopping basket")]
        [Xunit.TraitAttribute("Description", "Ordering digital books only")]
        public void OrderingDigitalBooksOnly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ordering digital books only", "    Placing an order with digital products only should result in an invoice with " +
                    "no additional cost for shipping.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    this.FeatureBackground();
#line hidden
#line 21
        testRunner.Given("Simone has a shopping cart with: \'Specification By Example\' with format \'PDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
        testRunner.And("it also contains \'Writing Great Specifications\' with format \'epub\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.When("she is going to pay her order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Amount",
                            "Price",
                            "Discount",
                            "Total Price"});
                table2.AddRow(new string[] {
                            "PDF: Specification By Example by Gojko Adzic",
                            "1x",
                            "22.67",
                            "0",
                            "22.67"});
                table2.AddRow(new string[] {
                            "epub: Writing Great Specifications by Kamil Nicieja",
                            "1x",
                            "22.67",
                            "0",
                            "22.67"});
#line 24
        testRunner.Then("she should get an invoice that has the following invoice items", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ordering multiple items of the same book")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating an invoice from a shopping basket")]
        [Xunit.TraitAttribute("Description", "Ordering multiple items of the same book")]
        public void OrderingMultipleItemsOfTheSameBook()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ordering multiple items of the same book", "    Ordering multiple items of the same book should give a different total price " +
                    "(book price times the number of books ordered)", tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    this.FeatureBackground();
#line hidden
#line 33
        testRunner.Given("Simone has a shopping cart with 2 copies of \'Specification By Example\' with forma" +
                        "t \'PDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
        testRunner.And("it also contains 1 copy of \'Writing Great Specifications\' with format \'epub\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
        testRunner.When("she is going to pay her order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Amount",
                            "Price",
                            "Discount",
                            "Total Price"});
                table3.AddRow(new string[] {
                            "PDF: Specification By Example by Gojko Adzic",
                            "2x",
                            "22.67",
                            "0",
                            "45.34"});
                table3.AddRow(new string[] {
                            "epub: Writing Great Specifications by Kamil Nicieja",
                            "1x",
                            "22.67",
                            "0",
                            "22.67"});
#line 36
        testRunner.Then("she should get an invoice that has the following invoice items", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ordering hard copy books should add shipping costs")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating an invoice from a shopping basket")]
        [Xunit.TraitAttribute("Description", "Ordering hard copy books should add shipping costs")]
        public void OrderingHardCopyBooksShouldAddShippingCosts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ordering hard copy books should add shipping costs", "    Placing an order with fysical items should add shipping costs to the invoice." +
                    "", tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    this.FeatureBackground();
#line hidden
#line 45
        testRunner.Given("Simone has a shopping cart with: \'Specification By Example\' with format \'Hard cop" +
                        "y\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
        testRunner.When("she is going to pay her order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Amount",
                            "Price",
                            "Discount",
                            "Total Price"});
                table4.AddRow(new string[] {
                            "Hard copy: Specification By Example by Gojko Adzic",
                            "1x",
                            "31.49",
                            "0",
                            "31.49"});
                table4.AddRow(new string[] {
                            "Shipping",
                            "1x",
                            "5.95",
                            "0",
                            "5.95"});
#line 47
        testRunner.Then("she should get an invoice that has the following invoice items", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ordering physical items with a total amount above EUR 100 should result in free s" +
            "hipping")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating an invoice from a shopping basket")]
        [Xunit.TraitAttribute("Description", "Ordering physical items with a total amount above EUR 100 should result in free s" +
            "hipping")]
        public void OrderingPhysicalItemsWithATotalAmountAboveEUR100ShouldResultInFreeShipping()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ordering physical items with a total amount above EUR 100 should result in free s" +
                    "hipping", "    Placing an order with a total amount above EUR 100 should give free shipping\n" +
                    "        \n***Free Shipping:***\n![Shopping Cart Mockup](./src/WebShop.Specificatio" +
                    "ns.Specs/Notes/shipping_costs.png)", tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    this.FeatureBackground();
#line hidden
#line 59
        testRunner.Given("Simone has a shopping cart with 10 copies of \'Specification By Example\' with form" +
                        "at \'Hard copy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
        testRunner.When("she is going to pay her order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Amount",
                            "Price",
                            "Discount",
                            "Total Price"});
                table5.AddRow(new string[] {
                            "Hard copy: Specification By Example by Gojko Adzic",
                            "10x",
                            "31.49",
                            "0",
                            "314.90"});
                table5.AddRow(new string[] {
                            "Shipping",
                            "1x",
                            "5.95",
                            "5.95",
                            "0"});
#line 61
        testRunner.Then("she should get an invoice that has the following invoice items", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Ordering different amounts of books")]
        [Xunit.TraitAttribute("FeatureTitle", "Creating an invoice from a shopping basket")]
        [Xunit.TraitAttribute("Description", "Ordering different amounts of books")]
        [Xunit.InlineDataAttribute("1", "5.95", new string[0])]
        [Xunit.InlineDataAttribute("3", "5.95", new string[0])]
        [Xunit.InlineDataAttribute("4", "0", new string[0])]
        [Xunit.InlineDataAttribute("10", "0", new string[0])]
        public void OrderingDifferentAmountsOfBooks(string amount, string shippingCosts, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("shipping costs", shippingCosts);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ordering different amounts of books", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
     this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    this.FeatureBackground();
#line hidden
#line 69
         testRunner.Given(string.Format("Simone has a shopping cart with {0} copies of \'Specification By Example\' with for" +
                            "mat \'Hard copy\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
         testRunner.When("she is going to pay her order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
         testRunner.Then(string.Format("the shipping costs should be {0}", shippingCosts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreatingAnInvoiceFromAShoppingBasketFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreatingAnInvoiceFromAShoppingBasketFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
